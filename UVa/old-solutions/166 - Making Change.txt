#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <cstring>
#include <vector>
#include <deque>
#include <algorithm>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <iomanip>
#include <sstream>
#include <cmath>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <fstream>
#define s scanf
#define p printf
#define ss scanf_s
#define pf push_front
#define pp push_back
#define mp make_pair
#define OO 1e9
#define mm(a) memset(a , -1 , sizeof a)
#define mm0(a) memset(a , 0 , sizeof a)
using namespace std;
int table[11][501], dp[7][501], seq[] {0 ,5, 10, 20, 50, 100, 200} , rep[6] , target , deC;
int DP(int index, int money){
	if (index == 6){
		if (money > target) return table[6][money - target];
		if (money == target) return 0;
		else return (int)OO;
	}
	if (dp[index][money] != -1) return dp[index][money];
	dp[index][money] = (int)OO;
	for (int x = 0; x <= rep[index]; x++){
		dp[index][money] = min(dp[index][money], x + DP(index + 1, money + (x * seq[index + 1])));
	}
	return dp[index][money];
}
int main() {
	for (int i = 1; i < 7; i++){
		for (int ii = 1; ii < 501; ii++){
			if (i - 1 == 0) table[0][ii] = (int)OO;
			table[i][ii] = table[i - 1][ii];
			if (ii >= seq[i]) table[i][ii] = min(table[i][ii],1 + table[i][ii - seq[i]]);
		}
	} 
	while (s("%d%d%d%d%d%d", &rep[0], &rep[1], &rep[2], &rep[3], &rep[4], &rep[5]) == 6){
		if (rep[0] == 0 && rep[1] == 0 && rep[2] == 0 && rep[3] == 0 && rep[4] == 0 && rep[5] == 0) break;
		s("%d.%d", &target, &deC); target *= 100; target += deC; mm(dp); //cout << target << endl;
		p("%3d\n", DP(0, 0));
	}
	return 0;
}