#include "stdafx.h"
#include <iostream>
#include <stdio.h>
#include <string>
#include <vector>
#include <deque>
#include <algorithm>
#include <map>
#include <set>
#include <stdlib.h>
#include <stack>
#include <queue>


using namespace std;

int main() {

	int testcases; cin >> testcases; cin.ignore(); map<string, string> tree; string key, value; map<string, string> tree2;
	set <string> added;
	set <string>removed;
	set <string>changed;

	for (int t = 0; t < testcases; t++){

		string str1 = ""; string str2 = ""; bool iskey = true; tree.clear(); tree2.clear();
		added.clear(); removed.clear(); changed.clear();

		getline(cin, str1, '}');

		int size = str1.length();

		for (int i = 0; i < size; i++){
			
			if (str1[i] == '\n'){
				continue;
			}

			if (str1[i] == '{'){
				iskey = true;
				continue;
			}

			if (str1[i] == ':'){

				iskey = false;
				continue;
			}

			if (str1[i] == ','){

				tree.insert(make_pair(key, value));

				key = ""; value = "";
				iskey = true;
				continue;
			}

			else {

				

					if (iskey){
						key.push_back(str1[i]);
					}

					else {
						value.push_back(str1[i]);
					}

				
			}

		}

		if (key != "" && value != ""){
			tree.insert(make_pair(key, value));
			key = ""; value = "";
		}

		getline(cin, str2, '}');

		int sizee = str2.length();



		for (int ii = 0; ii < sizee; ii++){

			if (str2[ii] == '\n'){
				continue;
			}

			if (str2[ii] == '{'){
				iskey = true;
				continue;
			}

			if (str2[ii] == ':'){

				iskey = false;
				continue;
			}

			if (str2[ii] == ','){

				map<string, string> ::iterator it = tree.find(key);

				if (it == tree.end()){

					added.insert(key);
					
				}

				else {

					if ((*it).second != value){
						changed.insert(key);
						
					}
				}

				tree2.insert(make_pair(key, value));

				key = ""; value = "";
				iskey = true;
				continue;
			}

			else {

				

					if (iskey){
						key.push_back(str2[ii]);
					}

					else {
						value.push_back(str2[ii]);
					}

				
			}


		}

		if (key != "" && value != ""){

			map<string, string> ::iterator it = tree.find(key);

			if (it == tree.end()){

				added.insert(key);

			}

			else {

				if ((*it).second != value){
					changed.insert(key);

				}
			}
			tree2.insert(make_pair(key, value));
			key = ""; value = "";

		}

		for (map<string, string> ::iterator itr = tree.begin(); itr != tree.end(); itr++){

			map<string, string> ::iterator sr = tree2.find((*itr).first);

			if (sr == tree2.end()){
				removed.insert((*itr).first);
				
			}
		}

		


		if (added.empty() && removed.empty() && changed.empty()){

			cout << "No changes" << endl << endl;
			continue;
		}

		if (added.empty() == false){

			cout << "+" << *added.begin();

			for (set <string> ::iterator x = added.begin(); x != added.end(); x++){
				if (x == added.begin()) continue;

				cout << ',';
				cout << *x;
			}

			cout << endl;
		}

		if (removed.empty() == false){

			cout << "-" << *removed.begin();

			for (set <string> ::iterator xx = removed.begin(); xx != removed.end(); xx++){
				if (xx == removed.begin()) continue;

				cout << ',';
				cout << *xx;
			}

			cout << endl;
		}
			

		if (changed.empty() == false){

			cout << "*" << *changed.begin();

			for (set <string> ::iterator xxx = changed.begin(); xxx != changed.end(); xxx++){
				if (xxx == changed.begin()) continue;

				cout << ',';
				cout << *xxx;
			}

			cout << endl;
		}
			


		cout << endl;


		if (t < testcases - 1){
			cout.clear();
		}

	}





	system("pause");
	return 0;
}

