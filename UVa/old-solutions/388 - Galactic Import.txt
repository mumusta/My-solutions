#include <bits/stdc++.h>
#define s scanf
#define p printf
#define pf push_front
#define pp push_back
#define mp make_pair
#define OO 1e9
#define EPS 1e-9
#define __ 1000000007
#define V(a) vector <a>
#define P(a,b) pair <a,b>
#define ALL(a) a.begin(),a.end()
#define mm(a) memset(a , -1 , sizeof a)
#define mm0(a) memset(a , 0 , sizeof a)
typedef unsigned long long int ull; //typedef pair<int, int> II;
typedef long long int ll; ll MAX(ll a, ll b) { if (a > b) return a; else return b; }
using namespace std; ll MIN(ll a, ll b) { if (a < b) return a; else return b; }
ll MOD(ll a, ll b) { return a >= 0 ? a % b : (b - abs(a % b)) % b; }
int X[] = { 1, 0, -1, 0, 1, -1, -1, 1 };
int Y[] = { 0, 1, 0, -1, 1, 1, -1, -1 };
int I(char c){ return (int)(c - ('A' - 1)); }
int main() { int n; char t; string str; double tt;
	while (s("%d", &n) == 1){
		V(P(int,V(int))) graph(30);
		for (int x = 0; x < n; x++){
			cin >> t >> tt >> str; tt *= 1000; int ind = I(t);
			int size = str.length(); graph[ind].first = tt;
			for (int i = 0; i < size; i++){
				if (str[i] == '*'){ graph[ind].second.pp(0); graph[0].second.pp(ind); }
				else graph[ind].second.pp(I(str[i]));
			}
		}
		queue <int> q; q.push(0); V(int) dis(30, OO); dis[0] = 0; int max_valueablety = -OO, max_node = -99;
		while (!q.empty()){
			int u = q.back(); q.pop(); int size = graph[u].second.size();
			for (int x = 0; x < size; x++){
				if (dis[graph[u].second[x]] == OO){
					int valplty = graph[graph[u].second[x]].first;
					if (valplty - dis[u] > max_valueablety){
						max_valueablety = valplty - dis[u]; max_node = graph[u].second[x];
					}
					if (valplty - dis[u] == max_valueablety && max_node > graph[u].second[x]){
						max_node = graph[u].second[x];
					}
					dis[graph[u].second[x]] = dis[u] + 5;
					q.push(graph[u].second[x]);
				}
			}
		}
		p("Import from %c\n", (char)(max_node + ('A' - 1)));
	}
	return 0;
}