#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <vector>
#include <deque>
#include <algorithm>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <iomanip>
#include <sstream>
#include <cmath>
using namespace std;
int binary_search_MotherFucker_I_I_I_I_I_I_I_I_I_I_I_I_I(int start, int end, int f , int a[] , int n){
	while (start < end){
		int mid = start + (end - start + 1) / 2;
		if (a[mid] - f > n) end = mid - 1;
		else if (a[mid] - f < n) start = mid;
		else start = mid;
	}
	return start;
}
int main(){
	int n; map <int, pair <int, int>> tree;
	while (cin >> n){
		int shit; scanf("%i", &shit);
		int *a = new int[shit];
		for (int x = 0; x < shit; x++){
			scanf("%i", &a[x]);
		}
		for (int i = 0; i < shit; i++){
			int ii = binary_search_MotherFucker_I_I_I_I_I_I_I_I_I_I_I_I_I(i + 1, shit - 1, a[i], a, n - 1);
			map <int, pair <int, int>> ::iterator it = tree.find((ii - i) + 1);
			if (it == tree.end()){
				tree.insert(make_pair(((ii - i) + 1), make_pair(a[i], a[ii])));
			}
			else continue;
		}
		map <int, pair <int, int>> ::reverse_iterator itt = tree.rbegin();
		printf("%i %i %i\n", (*itt).first, (*itt).second.first, (*itt).second.second);
		tree.clear();
		delete[]a;
	}
	return 0;
}