#include <bits/stdc++.h>
#define s scanf
#define p printf
#define pf push_front
#define pp push_back
#define mp make_pair
#define OO 1e9
#define EPS 1e-9
#define __ 1000000007
#define V(a) vector <a>
#define P(a,b) pair <a,b>
#define II pair <int, int>
#define ALL(a) a.begin(),a.end()
#define mm(a) memset(a , -1 , sizeof a)
#define mm0(a) memset(a , 0 , sizeof a)
typedef unsigned long long int ull; 
typedef long long int ll; ll MAX(ll a, ll b) { if (a > b) return a; else return b; }
using namespace std; ll MIN(ll a, ll b) { if (a < b) return a; else return b; }
int OneD(int row, int col, int t_n_o_r) { return row * t_n_o_r + col; }
ll MOD(ll a, ll b) { return a >= 0 ? a % b : (b - abs(a % b)) % b; }
int X[] = { 1, 0, -1, 0, 1, -1, -1, 1 };
int Y[] = { 0, 1, 0, -1, 1, 1, -1, -1 };
int main() { int N , n , m , e , T , a , b , w; s("%d", &N);
	for (int t = 0; t < N; t++){ if (t != 0) p("\n");
		s("%d%d%d%d", &n, &e, &T, &m); V(V(II)) graph(n + 1);
		for (int x = 0; x < m; x++) { s("%d%d%d", &a, &b, &w); graph[b].pp(mp(a, w)); }
		priority_queue <II, V(II), greater<II>> pq; pq.push(mp(0, e)); V(int) dis(n + 1, OO); dis[e] = 0; int ans = 0;
		while (!pq.empty()){
			II top = pq.top(); pq.pop(); int d = top.first, u = top.second , size = graph[u].size();
			if (d > dis[u]) continue; 
			for (int x = 0; x < size; x++){
				II v = graph[u][x]; int v_node = v.first, v_w = v.second;
				if (dis[u] + v_w < dis[v_node]){
					dis[v_node] = dis[u] + v_w; pq.push(mp(dis[v_node], v_node));
				}
			}
		} for (int x = 1; x <= n; x++){
			ans += (dis[x] <= T);
		}
		p("%d\n", ans);
	}
	return 0;
}